<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用GitHub+Hexo快速搭建个人博客</title>
      <link href="/2018/01/30/shi-yong-github-hexo-kuai-su-da-jian-ge-ren-bo-ke/"/>
      <url>/2018/01/30/shi-yong-github-hexo-kuai-su-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="使用GitHub-Hexo快速搭建个人博客"><a href="#使用GitHub-Hexo快速搭建个人博客" class="headerlink" title="使用GitHub+Hexo快速搭建个人博客"></a>使用GitHub+Hexo快速搭建个人博客</h3><hr><blockquote><p>假设您已经熟练使用git和node，这里不再介绍Git和node的相关知识。<br>git入门可以访问廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a>。<br>node入门可以访问<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a>。</p></blockquote><h4 id="在GitHub新建仓库，取名为project-github-io"><a href="#在GitHub新建仓库，取名为project-github-io" class="headerlink" title="在GitHub新建仓库，取名为project.github.io"></a>在GitHub新建仓库，取名为project.github.io</h4><p>project为你的github账户名<br><img src="https://pinrenwuimage.taidu8.com/bannercs/2040/01301.png" alt="https://pinrenwuimage.taidu8.com/bannercs/2040/01301.png"><br>也可以将已存在的创库覆盖</p><blockquote><p>git remote add origin <a href="https://github.com/zhanggangxia/zhanggangxia.github.io.git" target="_blank" rel="noopener">https://github.com/zhanggangxia/zhanggangxia.github.io.git</a><br>git push -u origin master</p></blockquote><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>hexo是基于node.js运行的，所以您需要在本地先安装node.js。<br>node.js地址：<a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">node.js</a></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>Hexo 官方网址： <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a>。<br>Hexo使用中文文档参考：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a></p><p>使用 npm 安装 Hexo</p><blockquote><p>$ npm install -g hexo-cli</p></blockquote><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><blockquote><p>$ hexo init <folder><br>$ cd <folder><br>$ npm install</folder></folder></p></blockquote><p>新建完成后，指定文件夹的目录如下：</p><pre><code>├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h3 id="项目文件说明"><a href="#项目文件说明" class="headerlink" title="项目文件说明"></a>项目文件说明</h3><h4 id="config-yml-配置文件"><a href="#config-yml-配置文件" class="headerlink" title="_config.yml 配置文件"></a>_config.yml 配置文件</h4><p>网站的 配置 信息，您可以在此配置大部分的参数。<br>详情可以参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a></p><h4 id="package-json-应用程序的信息"><a href="#package-json-应用程序的信息" class="headerlink" title="package.json 应用程序的信息"></a>package.json 应用程序的信息</h4><p>EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><pre><code>package.json{  &quot;name&quot;: &quot;hexo-site&quot;,  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;private&quot;: true,  &quot;hexo&quot;: {    &quot;version&quot;: &quot;&quot;  },  &quot;dependencies&quot;: {    &quot;hexo&quot;: &quot;^3.0.0&quot;,    &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;,    &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;,    &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;,    &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;,    &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;,    &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;,    &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;,    &quot;hexo-server&quot;: &quot;^0.1.2&quot;  }}</code></pre><h4 id="scaffolds-模板文件夹"><a href="#scaffolds-模板文件夹" class="headerlink" title="scaffolds 模板文件夹"></a>scaffolds 模板文件夹</h4><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h4 id="source资源文件夹"><a href="#source资源文件夹" class="headerlink" title="source资源文件夹"></a>source资源文件夹</h4><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h4 id="themes-主题"><a href="#themes-主题" class="headerlink" title="themes 主题"></a>themes 主题</h4><p>Hexo 会根据主题来生成静态页面。<br>下载更多主题<a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/themes</a></p><h3 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h3><p>在项目文件夹中，使用如下命令开启博客服务。</p><blockquote><p>hexo s<br>浏览器中访问：<a href="http://localhost:4000。" target="_blank" rel="noopener">http://localhost:4000。</a></p></blockquote><p>至此，本地博客搭建完成，下一步部署到github上。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>hexo需要先生成静态文件才能部署到github。</p><p>使用 Hexo 生成静态文件快速而且简单。</p><blockquote><p>$ hexo generate</p></blockquote><h5 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h5><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><blockquote><p>$ hexo generate –watch</p></blockquote><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上</p><blockquote><p>$ hexo deploy<br>在开始之前，您必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如:<br>deploy:<br>  type: git</p></blockquote><p>安装 <a href="hexo-deployer-git">hexo-deployer-git</a>。</p><p>修改配置。</p><blockquote><p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/hanwuji321/hanwuji321.github.io.git" target="_blank" rel="noopener">https://github.com/hanwuji321/hanwuji321.github.io.git</a><br>  branch: master<br>  message: </p></blockquote><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td style="text-align:left">repo</td><td style="text-align:right">库（Repository）地址</td></tr><tr><td style="text-align:left">branch</td><td style="text-align:right">GitHub分支名称</td></tr><tr><td style="text-align:left">message</td><td style="text-align:right">自定义提交信息</td></tr></tbody></table><p>aaa</p><h5 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h5><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><blockquote><p>$ hexo generate –deploy<br>$ hexo deploy –generate</p></blockquote><h5 id="上面两个命令可以简写为"><a href="#上面两个命令可以简写为" class="headerlink" title="上面两个命令可以简写为"></a>上面两个命令可以简写为</h5><blockquote><p>$ hexo g -d<br> $ hexo d -g</p></blockquote><hr><h3 id="使用hexo新建文章"><a href="#使用hexo新建文章" class="headerlink" title="使用hexo新建文章"></a>使用hexo新建文章</h3><p>你可以执行下列命令来创建一篇新文章。</p><blockquote><p>$ hexo new [layout] <title></title></p></blockquote><p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</p><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><table><thead><tr><th style="text-align:left">布局</th><th style="text-align:right">路径</th></tr></thead><tbody><tr><td style="text-align:left">post</td><td style="text-align:right">库source/_posts</td></tr><tr><td style="text-align:left">page</td><td style="text-align:right">source</td></tr><tr><td style="text-align:left">draft</td><td style="text-align:right">source/_drafts</td></tr></tbody></table><h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4><p>Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。</p><h4 id="给文章添加标签和分类"><a href="#给文章添加标签和分类" class="headerlink" title="给文章添加标签和分类"></a>给文章添加标签和分类</h4><p>使用<code>$ hexo new [layout] &lt;title&gt;</code>命令会生成一个md文件，在md文件中进行如下配置即可添加标签和分类。</p><pre><code>---title: [title]date: [date]tags: [tags]                 # tags标签categories: [categories]     # categories分类---</code></pre><p>多个标签需要以下写法：</p><pre><code>---tags:     - [tags1]    - [tags2]    - [tags3]    ...---</code></pre><p>文章内容使用md语法编辑。</p><p>完成后执行如下命令即可发布到github</p><blockquote><p>$ hexo g -d</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
